"""""""""
"Plugins"
"""""""""
" automatic installation of vim-plug and missing plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" run `PlugInstall` if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
      \| PlugInstall --sync | source $MYVIMRC
      \| endif

" will need to change the folder location below if using something else
" linux default = ~/.vim/plugged; windows default = $HOME/vimfiles/plugged
call plug#begin('~/.vim/plugged')

Plug 'ap/vim-css-color' " displays css colors in vim
Plug 'chun-yang/auto-pairs' " inserts/deletes brackets, parens, and quotes in pairs
Plug 'dense-analysis/ale' " asynchronous lint engine
Plug 'conradirwin/vim-bracketed-paste' " allows you to paste text from other apps without indent
Plug 'davidhalter/jedi-vim' " python auto-completion and vim key bindings
Plug 'easymotion/vim-easymotion' " easier way to move around vim - use <Leader><Leader><action>
Plug 'godlygeek/tabular' " code alignment with ':Tabularsize /[character]'
"Plug 'honza/vim-snippets' " snippets engine
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' } " markdown preview
Plug 'inkarkat/vim-visualrepeat' " like vim-repeat but for VISUAL mode
Plug 'jdhao/better-escape.vim' " no lag when pressing ESC or keybindings to ESC
Plug 'junegunn/fzf.vim' " command-line fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " command-line fuzzy finder
Plug 'junegunn/vim-peekaboo' " see contents of registries with '@' or double quotes
Plug 'liuchengxu/vim-which-key' " adds a popup that displays available keybindings
Plug 'luochen1990/rainbow' " adds color to brackets and parenthesis
Plug 'mattn/vim-lsp-settings' " lsp auto-configs
Plug 'mhinz/vim-startify' " a start screen for Vim
Plug 'nickspoons/vim-sharpenup' " mappings, code actions, and statusline for c#
Plug 'omnisharp/omnisharp-vim' " c# lsp server
Plug 'prabirshrestha/vim-lsp' " allows vim language server protocol
"Plug 'prabirshrestha/async.vim' " allows for asynchronous features like snippets
Plug 'prabirshrestha/asyncomplete.vim' " async completion
Plug 'prabirshrestha/asyncomplete-lsp.vim' " async completion source
Plug 'preservim/vim-markdown' " syntax highlighting, matching rule and mapping
Plug 'preservim/nerdtree' " file explorer for vim - use ':NERDTree'
Plug 'preservim/vim-lexical' " better spell checker
Plug 'preservim/vim-litecorrect' " auto correct common mis-spelled words like 'teh' to 'the'
Plug 'qpkorr/vim-renamer' " create a buffer with a list of directories to rename with :Renamer
Plug 'rafi/awesome-vim-colorschemes' " a collection of color schemes - has onehalf and more
Plug 'rhysd/vim-lsp-ale' " allows the combination of vim-lsp and ale
Plug 'ryanoasis/vim-devicons' " adds icons to vim and NERDTree
Plug 'sheerun/vim-polyglot' " syntax highlighting for various languages
Plug 'simnalamburt/vim-mundo' " visualize the vim undo tree
"Plug 'sirver/ultisnips' " snippets for various programming languages
Plug 'terryma/vim-smooth-scroll' " smooth scrolling
"Plug 'thomasfaingnaert/vim-lsp-ultisnips' " integrates ultisnips plugin into vim-lsp
"Plug 'thomasfaingnaert/vim-lsp-snippets' " integrates snippets plugin into vim-lsp
Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " adds color to file extensions
Plug 'tpope/vim-abolish' " camel, Mixed, snake_, title, upper case with `crc/m/s/t/u` and `:Subvert`
Plug 'tpope/vim-commentary' " comments stuff out - use 'gcc' or 'gc' in visual mode
Plug 'tpope/vim-fugitive' " git commands - call with :Git
Plug 'tpope/vim-repeat' " repeat last `.` command as a whole
Plug 'tpope/vim-surround' " surround text - use cs, ds, ys
Plug 'tpope/vim-unimpaired' " useful mapings like ']<space>' to insert lines and many more
Plug 'vim-airline/vim-airline' " status bar
Plug 'vimwiki/vimwiki' " organize notes and ideas
Plug 'voldikss/vim-floaterm' " adds a popup for the terminal
Plug 'wsdjeg/vim-fetch' " allows you to process line and column jump with vim file:<line>:<col>
Plug 'yegappan/mru' " to open a file from the recently used list use 'MRU:'
Plug 'yggdroot/indentline' " adds thin vertical lines at each indentation level for code

" old plugins - no longer in use
"Plug 'ackyshake/VimCompletesMe' " tab completion for vim
"Plug 'bitfyre/vim-indent-html' " allows for auto indent for multiline element attributes
"Plug 'bkad/CamelCaseMotion' " move between camel case words - use <Leader><action>
"Plug 'christoomey/vim-system-copy' " copy to OS clipboard - use 'cp' to copy and 'cv' to paste
"Plug 'dkarter/bullets.vim' " automate bullet lists and numbering
"Plug 'ervandew/supertab' " tab for all insert completion - good combo for vim-litecorrect
"Plug 'frazrepo/vim-rainbow' " adds color to brackets and parenthesis
"Plug 'gabrielelana/vim-markdown' " syntax highlighting, matching rules and mapping for Markdown
"Plug 'iggredible/totitle-vim' " title case text - use 'gt'
"Plug 'inkarkat/vim-SpellCheck' " adds a better spell checker
"Plug 'inkarkat/vim-ingo-library' " dependency for vim-spellcheck
"Plug 'itchyny/lightline.vim' " a lightweight status bar
"Plug 'jayli/vim-easycomplete' " code auto completion written in vimscript - run :InstallLspServer
"Plug 'jeetsukumaran/vim-python' " python text objects and motions for navigation
"Plug 'justinmk/vim-sneak' " jump to any located specified by two characters - use 's<char><char>
"Plug 'ludovicchabant/vim-gutentags' " generate tags
"Plug 'maksimr/vim-jsbeautify' " use jsbeautifier for JavaScript code - useful for one-liners
"Plug 'mg979/vim-visual-multi' " adds multiple cursors with CTRL + up/down
"Plug 'mhinz/vim-signify' " adds VCS status
"Plug 'michaeljsmith/vim-indent-object' " adds auto indent for objects
"Plug 'neoclide/coc.nvim', {'branch': 'release'} " auto completion for code
"Plug 'raimondi/delimitMate' " automatic closing of quotes, brackets, and parentheses
"Plug 'psliwka/vim-dirtytalk, { 'do': 'DirtytalkUpdate' } " spellcheck dictionary for programmers
"Plug 'solvedbiscuit71/vim-autopair' " inserts/deletes brackets, parens, and quotes in pairs
"Plug 'sonph/onehalf', { 'rtp': 'vim' } " color scheme for vim layout
"Plug 'tpope/vim-markdown' " syntax highlighting, matching rules and mapping for Markdown
"Plug 'turbio/bracey.vim', {'do': 'npm install --prefix server'} " live HTML, css, and JavaScript preview
"Plug 'vim-airline/vim-airline-themes' " themes for the status bar - use ':AirlineTheme <theme>'
"Plug 'vim-syntastic/syntastic' " syntax checker and linter for various languages
"Plug 'vimjas/vim-python-pep8-indent' " PEP8 indentation aesthetic preferences
"Plug 'ycm-core/YouCompleteMe' " code auto completion for vim - to many dependencies

call plug#end()

""""""""
"Cursor"
""""""""
" cursor types
" 0 = blinking block
" 1 = blinking block (default)
" 2 = steady block
" 3 = blinking underline
" 4 = steady underline
" 5 = blinking bar (xterm)
" 6 = steady bar (xterm)

" set cursor for insert mode
let &t_SI = "\e[3 q"
" set cursor for everything else
let &t_EI = "\e[1 q"

" reset cursor on startup
augroup ResetCursorShape
au!
autocmd VimEnter * :normal :startinsert :stopinsert
augroup END

" set cursor on vim startup - command status bar has weird entries when this is set
" autocmd VimEnter * silent exec "!echo -ne '\e[1 q'"
" set cursor on vim exit
" autocmd VimLeave * silent exec "!echo -ne '\e[3 q'"

" set the timeout length for cursor to change faster
set timeoutlen=1000 ttimeoutlen=0

"""""""""""""""
"Miscellaneous"
"""""""""""""""
" start recent file where you left off
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

""""""""""
"Settings"
""""""""""
" set syntax highlighting
syntax on

" set event to trigger based on filetype
filetype plugin indent on

" set encoding and font
set encoding=utf-8
scriptencoding utf-8

" set what shell vim to use
set shell=zsh

" set no compatiable for vi
set nocompatible

" allows you to copy/paste text from system clipboard
set clipboard=unnamedplus
" use this for OSX and Windows
" set clipboard=unnamed

" more powerful backspacing
set backspace=indent,eol,start

" allow buffer content to be modified
set modifiable

" auto re-read files if unmodified inside vim
set autoread

" show vim commands
set showcmd

" set number of screen lines to use for the command line
set cmdheight=1

" set all folds to close
set foldenable

" hide buffer when abandon
set hidden

" set the kind of folding to be used for the current window
set foldmethod=manual

" set the list of directories which will be searched for files
set path+=**

" allow no swap file
set noswapfile

" highlight all search results
set hlsearch

" ignore case in search patterns '/'
set ignorecase

" override the ignorecase option if the search pattern contains upper case characters
set smartcase

" show incremental search results as you type
set incsearch

" set screen to not redrawn while execution macros, registers, or commands
set lazyredraw

" disable beep sound and visual queue
set noerrorbells
set novisualbell
set noeb vb t_vb=

" display line number
set number

" display relative numbers
set relativenumber

" convert tab to spaces
set expandtab

" set auto indent - copy indent from current line when starting a new line
set autoindent

" set the number of spaces to use for each step of autoindent `>>` or `<<`
set shiftwidth=4

" set the number of spaces that a tab in the file counts for
set tabstop=4

" set search to cycle to top once it hits the bottom
set wrapscan

" allow words to wrap
set wrap

" increment/decrement alphanumeric values with CTRL + A and CTRL + X
set nrformats+=alpha

" set the amount of commands to save in history default is 20
set history=1000

" enable completion mode for command mode
set wildmode=longest,list,full

" allow mouse to be used
set mouse=a

" set GUI cursor
set guicursor+=a:blinkon0

" shorter updatetime for less delay
set updatetime=1000

" set spell checking language
set spelllang=en_us

" remove annoying message with switching between buffers
set hidden

" when splitting a window, it will move it below or right or current
set splitbelow
set splitright

" set statusline on all windows
set laststatus=2

" set title as filename
set title

" set side column to always appear
set signcolumn=yes

" set tab and space characters
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:·
set list

" set ripgrep as search
" set grepprg=rg\ --vimgrep\ --smart-case\ --follow

"""""""""""""
"Status Bars"
"""""""""""""

"""""""""""""
"AirLine Bar"
"""""""""""""
" set airline theme
let g:airline_theme = 'onehalfdark'

" set airline tabs
let g:airline#extensions#tabline#enabled = 1

" show buffer number in tab line - faster buffer delete with :bd <num>
let g:airline#extensions#tabline#buffer_nr_show = 1

"""""""""""""""
"LightLine Bar"
"""""""""""""""
"  "  minimal info on narrow splits
"  let g:lightline = {'component_function': {'lineinfo': 'LightlineLineinfo'}}

"  function! LightlineLineinfo() abort
"    if winwidth(0) < 86
"      return ''
"    endif
"    let l:current_line = printf('%-3s', line('.'))
"    let l:max_line = printf('%-3s', line('$'))
"    let l:lineinfo = ' ' . l:current_line . '/' . l:max_line
"    return l:lineinfo
"  endfunction

"  " remove readonly in help window
"  let g:lightline = {'component_function': {'readonly': 'LightlineReadonly'}}

"  function! LightlineReadonly()
"    return &readonly && &filetype !=# 'help' ? 'RO' : ''
"  endfunction

"  " no statusline in NERDTree window
"  augroup filetype_nerdtree
"      au!
"      au FileType nerdtree call s:disable_lightline_on_nerdtree()
"      au WinEnter,BufWinEnter,TabEnter * call s:disable_lightline_on_nerdtree()
"  augroup END

"  fu s:disable_lightline_on_nerdtree() abort
"      let nerdtree_winnr = index(map(range(1, winnr('$')), {_,v -> getbufvar(winbufnr(v), '&ft')}), 'nerdtree') + 1
"      call timer_start(0, {-> nerdtree_winnr && setwinvar(nerdtree_winnr, '&stl', '%#Normal#')})
"  endfu

"  " set window to always have a status line
"  set laststatus=2

"  " do not put a message on the last line
"  set noshowmode

"  " set status bar themes and views
"  let g:lightline = {
"              \ 'colorscheme': 'onehalfdark',
"              \ 'active': {
"                  \ 'left': [['mode'],
"                      \ ['gitbranch', 'readonly', 'absolutepath', 'modified']],
"                  \ 'right': [['lineinfo'],
"                      \ ['percent'], ['fileencoding', 'filetype', 'charvaluehex']]
"                  \ },
"              \'component': {
"                  \ 'charvaluehex': '0x%B'
"                  \ },
"              \ 'component_function': {
"                  \ 'gitbranch': 'FugitiveHead', 'cocstatus': 'coc#status'
"                  \ }
"              \ }

"  " use autocmd to force lightline to update
"  autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

"""""""
"Theme"
"""""""
" inspect $TERM instead of $t_Co
if &term =~ '256color'
  " enable true 24-bit colors instead of 8-bit colors
  if has('termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
    set t_co=256
  endif
  colorscheme onehalfdark
endif

" set background color
set background=dark

""""""""""""""""""""
"KEY MAPPINGS BEGIN"
""""""""""""""""""""
" set leader key to space
let mapleader = " "

"""""""""""""""""""
"Buffer Navigation"
"""""""""""""""""""
" ALT + arrowkeys allows us to navigate between windows
map <A-Left> <C-w>h
map <A-Down> <C-w>j
map <A-Up> <C-w>k
map <A-Right> <C-w>l

" Shift + arrowkeys allows us to resize the current buffer
map <silent> <S-Left> :vertical resize +5<Cr>
map <silent> <S-Right> :vertical resize -5<Cr>
map <silent> <S-Up> :resize +5<Cr>
map <silent> <S-Down> :resize -5<Cr>

" go to tab by number
" noremap <silent> <leader>1 :bfirst<Cr>
" noremap <silent> <leader>2 :b2<Cr>
" noremap <silent> <leader>3 :b3<Cr>
" noremap <silent> <leader>4 :b4<Cr>
" noremap <silent> <leader>5 :b5<Cr>
" noremap <silent> <leader>6 :b6<Cr>
" noremap <silent> <leader>7 :b7<Cr>
" noremap <silent> <leader>8 :b8<Cr>
" noremap <silent> <leader>9 :b9<Cr>
" noremap <silent> <leader>0 :blast<Cr>

" close current buffer
nnoremap <silent> <leader>x :bdelete %<Cr>

" CTRL + arrowkeys allows us to navigate between buffers - alt '[b/]b'
nnoremap <silent> <C-Left> :bprevious<Cr>
nnoremap <silent> <C-Right> :bnext<Cr>

" make a new buffer - adds to a new 'tab'
nnoremap <leader>t :edit newfile<Cr>

" create a new vertical window
nnoremap <leader>\ :vsplit<Cr>

" create a new horizontal window
nnoremap <leader>- :split<Cr>

" press 'fj' instead of ESC to switch to NORMAL mode from INSERT mode
"inoremap fj <Esc>

"""""""""""""""""
"Custom Bindings"
"""""""""""""""""
" FZF commands
map <silent> <leader>C :Colors<Cr>
map <silent> <leader>b :Buffers<Cr>
map <silent> <leader>W :Windows<Cr>
map <silent> <leader>H :History<Cr>
map <silent> <leader>c :History:<Cr>
map <silent> <leader>M :Maps<Cr>

" press <leader> ENTER to disable highlight search
nnoremap <silent> <leader><Cr> :set hlsearch!<Cr>

" source vimrc file
nnoremap <silent> <leader>u :source $MYVIMRC<Cr>

" run current python script
nnoremap <silent> <leader>p :w<Cr>:!clear<Cr>:!python %<Cr>

""""""""""""""
"Old Mappings"
""""""""""""""
" map the F5 key to run a Python script inside Vim
" I map F5 to a chain of commands here
" :w saves the file
" <CR> (carriage return) is like pressing the enter key
" !clear runs the external clear screen command
" !python3 % executes the current file with Python
" nnoremap <F5> :w <CR>:!clear <CR>:!python3 % <CR>

" press F8 to highlight occurrence of the current word(s)
" nnoremap <F8> :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>

" yank from cursor to the end of line.
" nnoremap Y y$

" press enter twice to turn off highlights after search
" nnoremap <CR> :nohlsearch<CR><CR>

"  " press enter to highlight occurrence of the current word(s)
"  let g:highlighting = 0
"  function! Highlighting()
"   if g:highlighting == 1 && @/ =~ '^\\<'.expand('<cword>').'\\>$'
"     let g:highlighting = 0
"     return ":silent nohlsearch\<CR>"
"   endif
"   let @/ = '\<'.expand('<cword>').'\>'
"   let g:highlighting = 1
"   return ":silent set hlsearch\<CR>"
"  endfunction
"  nnoremap <silent> <expr> <CR> Highlighting()

"  " set python environment variable from anaconda to coc.nvim
"  if has('nvim') && !empty($CONDA_PREFIX)
"   let g:python3_host_prog = $CONDA_PREFIX . '/bin/python'
"  endif

" press CTRL + J instead of ESC to switch to NORMAL mode from INSERT mode
" inoremap <C-j> <Esc>

" press CTRL + J instead of 'i' to switch to INSERT mode from NORMAL mode
" nnoremap <C-j> i

""""""""""""""""""
"KEY MAPPINGS END"
""""""""""""""""""

"""""""""""""""""""""""
"PLUGIN SETTINGS BEGIN"
"""""""""""""""""""""""

"""""""""""""""""""
"Beautify Settings"
"""""""""""""""""""
" map <C-f> :call JsBeautify()<Cr>

" for JavaScript
" autocmd FileType javascript noremap <buffer>  <C-f> :call JsBeautify()<Cr>

" for json
" autocmd FileType json noremap <buffer> <C-f> :call JsonBeautify()<Cr>

" for jsx
" autocmd FileType jsx noremap <buffer> <C-f> :call JsxBeautify()<Cr>

" for HTML
" autocmd FileType html noremap <buffer> <C-f> :call HtmlBeautify()<Cr>

" for css or scss
" autocmd FileType css noremap <buffer> <C-f> :call CSSBeautify()<Cr>

""""""""""""""""""""""""
"Better Escape Settings"
""""""""""""""""""""""""
" press these commands instead of ESC to switch from INSERT mode to NORMAL mode
let g:better_escape_shortcut = ['jj', 'ff', 'fj', 'jf']

"""""""""""""""""
"Bracey Settings"
"""""""""""""""""
" Bracey won't do anything until it is explicitly called
" map <F2> :Bracey<Cr>
" map <F3> :BraceyReload<Cr>
" map <F4> :BraceyStop<Cr>

""""""""""""""""""""
"CamelCase Settings"
""""""""""""""""""""
" this plugin was not changing the cursor right
"let g:camelcasemotion_key = "<leader>"

"""""""""""""""""""
"Coc.nvim Settings"
"""""""""""""""""""
"  " textedit fails if hidden is not set
"  set hidden

"  " some servers have issues with backup files
"  set nobackup
"  set nowritebackup

"  " don't pass messages to |ins-completition-menu|
"  set shortmess+=c

"  " always show signcolumn
"  if has("nvim-0.5.0") || has("patch-8.1.1564")
"    set signcolumn=number
"  else
"    set signcolumn=yes
"  endif

"  " declare Coc.nvim extensions
"  let g:coc_global_extensions = ['coc-git', 'coc-json', 'coc-markdownlint', 'coc-snippets', 'coc-word', 'coc-dictionary', 'coc-emoji', 'coc-syntax', 'coc-prettier', 'coc-tsserver', 'coc-css', 'coc-html', 'coc-pyright', 'coc-sh', 'coc-yaml']

"  " highlight the symbol and its references when holding the cursor
"  autocmd CursorHold * silent call CocActionAsync('highlight')

"  " rename all symbols
"  nmap <leader>rn <Plug>(coc-rename)

"  " apply codeAction to the selected region
"  " Example: `<leader>aap` for current paragraph
"  xmap <leader>a  <Plug>(coc-codeaction-selected)
"  nmap <leader>a  <Plug>(coc-codeaction-selected)

"  " apply codeAction to the current buffer
"  nmap <leader>ac  <Plug>(coc-codeaction)

"  " apply AutoFix to problem on the current line
"  nmap <leader>qf  <Plug>(coc-fix-current)

"  " run the CodeLens action on the current line
"  nmap <leader>cl  <Plug>(coc-codelens-action)

"  " use 'tab' to trigger completion with characters ahead and navigate
"  inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : CheckBackspace() ? "\<TAB>" : coc#refresh()
"  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"  " use 'CTRL + Space' in insert mode to trigger completion
"  if has('nvim')
"    inoremap <silent><expr> <c-space> coc#refresh()
"  else
"    inoremap <silent><expr> <c-@> coc#refresh()
"  endif

"  " make 'enter' auto-select the first completion item
"  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
"              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

"  " jump between linting errors
"  nmap <silent> [g <Plug>(coc-diagnostic-prev)
"  nmap <silent> ]g <Plug>(coc-diagnostic-next)

"  " goto code navigation
"  nmap <silent> gd <Plug>(coc-definition)
"  nmap <silent> gy <Plug>(coc-type-definition)
"  nmap <silent> gi <Plug>(coc-implementation)
"  nmap <silent> gr <Plug>(coc-references)

"  " use 'K' to show documentation in preview window
"  nnoremap <silent> K :call ShowDocumentation()<Cr>

"  function! ShowDocumentation()
"    if CocAction('hasProvider', 'hover')
"      call CocActionAsync('doHover')
"    else
"      call feedkeys('K', 'in')
"    endif
"  endfunction

"  function! CheckBackspace() abort
"    let col = col('.') - 1
"    return !col || getline('.')[col - 1] =~# '\s'
"  endfunction

"""""""""""""""""""
"Floaterm Settings"
"""""""""""""""""""
let g:floaterm_autohide = 0
let g:floaterm_autoclose = 2
let g:floaterm_height = 30
let g:floaterm_width  = 120

nnoremap <leader>T :FloatermToggle<Cr>

"""""""""""""""""""""
"IndentLine Settings"
"""""""""""""""""""""
" set indentLine color to white instead of grey
let g:indentLine_setColors = 0

" set the mode in which text in the cursor line can be concealed - conceal in normal and command mode
let g:indentLine_concealcursor = "nc"

"""""""""""""""""""""""""""
"Markdown Preview Settings"
"""""""""""""""""""""""""""
" toggle preview in normal mode
nmap <silent> <F8> <Plug>MarkdownPreview

" toggle preview in insert mode
imap <silent> <F8> <Plug>MarkdownPreview

" stop preview in normal mode
"nmap <silent> <F9> <Plug>StopMarkdownPreview

" stop preview in insert mode
"imap <silent> <F9> <Plug>StopMarkdownPreview

" path to the chrome or the command to open chrome (or other modern browsers)
let g:mkdp_browser='firefox'

" set to 1, Vim will open the preview window on entering the Markdown buffer
let g:mkdp_auto_start = 0

" set to 1, Vim will automatically open the preview window when you edit a markdown file
let g:mkdp_auto_open = 0

" set to 1, Vim will automatically close the current preview window when switching from one Markdown buffer to another
let g:mkdp_auto_close = 1

" set to 1, Vim will just refresh Markdown when saving the buffer or leaving from insert mode
" with default 0, it will automatically refresh markdown as you edit or move the cursor
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be used for all files
" by default it can only be used in Markdown files
let g:mkdp_command_for_global = 0

" set to 1, the preview server will be available to others in your network
" by default, the server only listens on localhost (127.0.0.1)
let g:mkdp_open_to_the_world = 1

""""""""""""""
"MRU Settings"
""""""""""""""
nnoremap <leader>m :MRU<Cr>

""""""""""""""""
"Mundo Settings"
""""""""""""""""
map <F5> :MundoToggle<CR>

" set undo directory
set undodir=~/.vim/undo
set undofile
set undoreload=1000

"""""""""""""""""""
"NERDTree Settings"
"""""""""""""""""""
nnoremap <leader>n :NERDTreeToggle<Cr>

" start NERDTree and put cursor in empty buffer or file
"autocmd VimEnter * NERDTree | wincmd p

" if another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
" exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" set NERDTree width
let g:NERDTreeWinSize=20

" remove the 'press ? for help' on top of NERDTree
let NERDTreeMinimalUI=1

" disable 80 extensions of nerdtree for less lag
let g:NERDTreeLimitedSyntax = 1

" create default mappings
let g:NERDCreateDefaultMappings = 1

" add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

"""""""""""""""""""""""""""""""
"NERDTree Functions and Colors"
"""""""""""""""""""""""""""""""
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

" enables folder icon highlighting using exact match
let g:NERDTreeHighlightFolders = 1
" highlights the folder name
let g:NERDTreeHighlightFoldersFullName = 1

" you can add these colors to your .vimrc to help customizing
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = "FE405F"
let s:git_orange = "F54D27"

" this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor = {}
" sets the color of css files to blue
let g:NERDTreeExtensionHighlightColor['css'] = s:blue

" this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor = {}
" sets the color for .gitignore files
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange

" this line is needed to avoid error
let g:NERDTreePatternMatchHighlightColor = {}
" sets the color for files ending with _spec.rb
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red

" sets the color for folders that did not match any rule
let g:WebDevIconsDefaultFolderSymbolColor = s:beige
" sets the color for files that did not match any rule
let g:WebDevIconsDefaultFileSymbolColor = s:blue

""""""""""""""""""""""
"Rainbow Settings"
""""""""""""""""""""""
" enable the rainbow bracket plugin
let g:rainbow_active = 1

""""""""""""""""""""""""
"Smooth Scroll Settings"
""""""""""""""""""""""""
" smooth_scroll(distance, duration, speed)
noremap <silent> <C-u> :call smooth_scroll#up(&scroll, 0, 2)<Cr>
noremap <silent> <C-d> :call smooth_scroll#down(&scroll, 0, 2)<Cr>
noremap <silent> <C-b> :call smooth_scroll#up(&scroll*2, 0, 4)<Cr>
noremap <silent> <C-f> :call smooth_scroll#down(&scroll*2, 0, 4)<Cr>

"""""""""""""""""""
"Snippets Settings"
"""""""""""""""""""
" use END key to trigger the snippets, default was tab but that conflicts with the Completion trigger
" see ':h keycodes' to change this to something else
" let g:UltiSnipsExpandTrigger='<END>'

" use CTRL + PgDn to list the available snippets
" let g:UltiSnipsListSnippets='<C-PageDown>'

" use CTRL j and k to move visually within the snippets
" let g:UltiSnipsJumpForwardTrigger='<C-j>'
" let g:UltiSnipsJumpBackwardTrigger='<C-k>'

"""""""""""""""""""
"Startify Settings"
"""""""""""""""""""
nnoremap <leader>i :Startify<Cr>

 " create a custom header
 let g:startify_custom_header =
       \ startify#pad(split(system('figlet -w 100 Vim'), '\n'))

" bookmarks - syntax is clear; add your own
let g:startify_bookmarks = [ {'I': '~/i3/i3/config'},{'L': '~/.blerc'},{'Z': '~/.zshrc'},{'B': '~/.bashrc'},{'V': '~/.vimrc'}]

let g:startify_lists = [
\ { 'type': 'bookmarks' , 'header': ['   Bookmarks']      } ,
\ { 'type': 'files'     , 'header': ['   Recent'   ]      } ,
\ { 'type': 'sessions'  , 'header': ['   Sessions' ]      } ,
\ { 'type': 'commands'  , 'header': ['   Commands' ]      } ,
\ ]

hi StartifyBracket ctermfg=240
hi StartifyFile    ctermfg=147
hi StartifyFooter  ctermfg=240
hi StartifyHeader  ctermfg=114
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240
hi StartifySpecial ctermfg=240

""""""""""""""""""""
"Syntastic Settings"
""""""""""""""""""""
" 0 off
" 1 the error window will be automatically opened when errors are detected and closed when none
" 2 the error window will be automatically closed when no errors are detected but not open automatically
" 3 the error window will be automatically opened when errors are detected but not closed automatically
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" 0 off
" 1 the cursor will always jump to the first issue detected
" 2 the cursor will jump to the first issue detected but only if the issue is an error
" 3 the cursor will jump to the first error detected if any
" let g:syntastic_auto_jump = 3

" Colors for the error signs and line highlight
" highlight SyntasticErrorSign ctermfg=red ctermbg=yellow
" highlight SyntasticErrorLine ctermbg=black

"""""""""""""""""""""""""""
"Vim-EasyComplete Settings"
"""""""""""""""""""""""""""
" nnoremap gr :EasyCompleteReference<Cr>
" nnoremap gd :EasyCompleteGotoDefinition<Cr>
" nnoremap rn :EasyCompleteRename<Cr>
" nnoremap gb :BackToOriginalBuffer<Cr>

" move down suggestions with CTRL + n/p - alternative to TAB
" imap <silent><<expr> <C-n> pumvisible() ? "\<down>" : "\<c-n>"
" imap <silent><<expr> <C-p> pumvisible() ? "\<up>" : "\<c-p>"

" these are the default key bindings for Diagnostic navigation
" nnoremap <silent> <C-k> :EasyCompleteNextDiagnostic<Cr>
" nnoremap <silent> <C-j> :EasyCompletePreviousDiagnostic<Cr>

" change tab completion to something other than tab
"let g:easycomplete_tab_trigger = "<C-Space>"

" let g:easycomplete_scheme = "rider"
" let g:easycomplete_cursor_word_hl = 0
" let g:easycomplete_diagnostics_enable = 1
" let g:easycomplete_lsp_checking = 1
" let g:easycomplete_signature_enable = 1
" let g:easycomplete_tabnine_enable = 0

" let g:easycomplete_tabnine_config = {
"   \ "line_limiit": 800,
"   \ "max_num_result": 10
"   \ }

" let g:easycomplete_menu_skin = {
"   \   "buf": {
"   \      "kind":"羅",
"   \      "menu":"[B]",
"   \    },
"   \   "snip": {
"   \      "kind":"",
"   \      "menu":"[S]",
"   \    },
"   \   "dict": {
"   \      "kind":"",
"   \      "menu":"[D]",
"   \    },
"   \   "tabnine": {
"   \      "kind":"",
"   \    },
"   \ }

" let g:easycomplete_sign_text = {
"   \ "error": "",
"   \ "warning": "",
"   \ "information": "",
"   \ "hint": ""
"   \ }

" let g:easycomplete_lsp_type_font = {
"   \ "class": "", "color": "",
"   \ "constant": "", "constructor": "",
"   \ "enum": "", "enummember": "",
"   \ "field": "料", "file": "",
"   \ "folder": "", "function": "ƒ",
"   \ "interface": "", "keyword": "",
"   \ "snippet": "", "struct": "פּ",
"   \ "text": "", "typeparameter": "",
"   \ "variable": "", "module":"",
"   \ "event": "",
"   \ "r":"", "t":"",
"   \ "f":"", "c":"",
"   \ "u":"𝘶", "e":"𝘦",
"   \ "s":"פּ", "v":"",
"   \ "i":"𝘪", "m":"",
"   \ "p":"", "k":"𝘬",
"   \ "o":"𝘰", "d":"𝘥",
"   \ "l":"𝘭", "a":"𝘢"
"   \ }

""""""""""""""""""""""
"Vim-Indent-HTML Settings"
""""""""""""""""""""""
" let g:html_indent_script1 = "inc"
" let g:html_indent_style1 = "inc"
" let g:html_indent_attribute = 1
" let g:html_indent_inctags = "html,body,head,tbody,p,ol,ul,li,dl,dt,dd,table,thead,tfoot,tr,th,td,h1,h2,h3,h4,h5,h6,pre,blockquote,form,fieldset,legend,article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section,summary,time"

""""""""""""""""""""""
"Vim-Lexical Settings"
""""""""""""""""""""""
" toggle spell check
:map <F6> :setlocal spell!<Cr>

" disable vim-lexical spell check
let g:lexical#spell = 0

" highlight mis-spellings with red
hi SpellBad ctermfg=red guifg=red

" enable spell-check, thesaurus, etc. only on these file types
" augroup lexical
"   autocmd!
"   autocmd FileType markdown,mkd call lexical#init()
"   autocmd FileType textile call lexical#init()
"   autocmd FileType text call lexical#init({ 'spell': 0 })
" augroup END

" enable thesaurus
"let g:lexical#thesaurus = ['~/.vim/thesaurus/mobythesaurus.txt']

" pop-up list of suggestions
"let g:lexical#spell_key = '<leader>s'

" pop-up thesaurus lookup
"let g:lexical#thesaurus_key = '<leader>r'

" pop-up dictionary lookup
"let g:lexical#dictionary_key = '<leader>d'

""""""""""""""""""""""""""
"Vim-LiteCorrect Settings"
""""""""""""""""""""""""""
" enable auto-correction in only these file types
augroup litecorrect
  autocmd!
  autocmd FileType markdown,mkd call litecorrect#init()
  autocmd FileType textile call litecorrect#init()
augroup END

""""""""""""""""""""""""
"Vim Lsp Settings Begin"
""""""""""""""""""""""""

""""""""""""""
"ALE Settings"
""""""""""""""
nnoremap <leader>l <Plug>(ale_toggle)
nnoremap <leader>L <Plug>(ale_lint)
nnoremap <leader>f <Plug>(ale_fix)
nnoremap gn <Plug>(ale_next_wrap)
nnoremap gN <Plug>(ale_previous_wrap)

" set fixers to use
let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\ 'javascript' : ['prettier'],
\ }

" set linters to use
let g:ale_linters = {
\ 'cs': ['OmniSharp'],
\ 'go': ['golint'],
\ 'markdown': [],
\ }

" set symbols for all the ale warnings
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
let g:ale_sign_info = '·'
let g:ale_sign_style_error = '·'
let g:ale_sign_style_warning = '·'

" only enable lint on save
"let g:ale_lint_on_text_changed = 'never'
"let g:ale_lint_on_enter = 0
"let g:ale_lint_on_save = 1

" set hover over feature
"let g:ale_set_balloons = 1

" do not highlight errors
let g:ale_set_highlights = 0

" set airline bar to show error
let g:airline#extensions#ale#enabled = 1

"""""""""""""""""""""""
"Asyncomplete Settings"
"""""""""""""""""""""""
" set auto complete to allow popups and define out options below
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0

" set completion options in insert mode - switch `popuphidden` to `preview` to not show a popup
if has('patch-8.1.1880')
    set completeopt=menuone,noinsert,noselect,popuphidden
    set completepopup=highlight:Pmenu,border:off
else
    set completeopt=menuone,noinsert,noselect
endif

" auto close preview windows when completion is done
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

"""""""""""""""""""
"Jedi-Vim Settings"
"""""""""""""""""""
" do not start the completion when you type a dot
"let g:jedi#popup_on_dot = 0

" do not select the first line in the completion popup
"let g:jedi#popup_select_first = 0

" do not auto complete
let g:jedi#auto_vim_configuration = 0
let g:jedi#completions_enabled = 0

" enable smart mapping
let g:jedi#smart_auto_mappings = 1

" set these keybindings
let g:jedi#usages_command = 'gu'
let g:jedi#documentation_command = 'K'

" do not display function signatures when typing
let g:jedi#show_call_signatures = 0

"  autocmd FileType python,py call Pyremaps()
"  fu! Pyremaps()
"    nnoremap <silent><buffer> gh :call jedi#show_documentation()<Cr>
"    nnoremap <silent><buffer> <C-\> :call jedi#show_call_signatures()<Cr>
"    nnoremap <silent><buffer> <leader>rn :call jedi#rename()<Cr>
"  endfu

""""""""""""""
"LSP Settings"
""""""""""""""
" set auto-completion - ultisnips conflicted with TAB
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <Cr> pumvisible() ? asyncomplete#close_popup() : "\<Cr>"

" mappings to common code navigation
nmap <buffer> gd <Plug>(lsp-definition)
nmap <buffer> gr <Plug>(lsp-references)
nmap <buffer> gs <Plug>(lsp-document-symbol-search)
nmap <buffer> gS <Plug>(lsp-workspace-symbol-search)
nmap <buffer> gi <Plug>(lsp-implementation)
nmap <buffer> gt <Plug>(lsp-type-definition)
nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
nmap <buffer> gh <Plug>(lsp-hover)
nmap <buffer> <leader>rn <Plug>(lsp-rename)
nmap <silent><buffer> <C-\> :LspSignatureHelp<Cr>

" set CTRL + SPACE or tab to trigger completion
inoremap <C-@> <Plug>(asyncomplete_force_refresh)
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" set which lsp server to use
let g:lsp_settings_filetype_cs = 'omnisharp-roslyn'
let g:lsp_settings_filetype_python = 'jedi-language-server'

" set semantic highlighting
let g:lsp_semantic_enabled = 1

" enable for debugging
"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/vim-lsp.log')
"let g:asyncomplete_log_file = expand('~/vim-asyncomplete.log')

"""""""""""""""""""
"OmniSharp Setting"
"""""""""""""""""""
" keep sharpen-up default key mappings
"let g:sharpenup_map_prefix = '<leader>os'

" do not use default key bindings instead use the ones below
let g:sharpenup_create_mappings = 0

" show type information when cursor stops moving - will echo to cmd line
autocmd CursorHold *.cs OmniSharpTypeLookup

" only apply these mappings to cs files
autocmd FileType cs call Csremaps()
fu! Csremaps()
  nmap <silent><buffer> gd <Plug>(omnisharp_go_to_definition)
  nmap <silent><buffer> gu <Plug>(omnisharp_find_usages)
  nmap <silent><buffer> gi <Plug>(omnisharp_find_implementations)
  nmap <silent><buffer> gpd <Plug>(omnisharp_preview_definition)
  nmap <silent><buffer> gpi <Plug>(omnisharp_preview_implementations)
  nmap <silent><buffer> gT <Plug>(omnisharp_type_lookup)
  nmap <silent><buffer> gh <Plug>(omnisharp_documentation)
  nmap <silent><buffer> gs <Plug>(omnisharp_find_symbol)
  nmap <silent><buffer> gt <Plug>(omnisharp_find_type)
  nmap <silent><buffer> gx <Plug>(omnisharp_fix_using)
  nmap <silent><buffer> gC <Plug>(omnisharp_global_code_check)
  nmap <silent><buffer> gc <Plug>(omnisharp_code_actions)
  nmap <silent><buffer> g. <Plug>(omnisharp_code_actions_repeat)
  nmap <silent><buffer> g= <Plug>(omnisharp_code_format)
  nmap <silent><buffer> [[ <Plug>(omnisharp_navigate_up)
  nmap <silent><buffer> ]] <Plug>(omnisharp_navigate_down)
  nmap <silent><buffer> <leadr>rn <Plug>(omnisharp_rename)
  nmap <silent><buffer> <C-\> <Plug>(omnisharp_signature_help)
  imap <silent><buffer> <C-\> <Plug>(omnisharp_signature_help)
endfu

" set statusline for omnisharp sharpen-up
let g:sharpenup_statusline_opts = {'Text': '%s (%p/%p)'}
let g:sharpenup_statusline_opts.Highlight = 0

" set 'fzf' to find stuff
let g:OmniSharp_selector_ui = 'fzf'
let g:OmniSharp_selector_findusages = 'fzf'

" allow popups
let g:OmniSharp_popup = 1

" set popup position - peek opens below or above cursor
let g:OmniSharp_popup_position = 'peek'

let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [0],
\ 'border': [1],
\ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰'],
\ 'borderhighlight': ['ModeMsg']
\}

let g:OmniSharp_popup_mappings = {
\ 'sigNext': '<C-j>',
\ 'sigPrev': '<C-k>',
\ 'sigParamNext': '<C-l>',
\ 'sigParamPrev': '<C-h>'
\ }

" use omnisharp-roslyn net6 server - new and improved
let g:OmniSharp_server_use_net6 = 1

" do not allow the use of snippets from UltiSnips
let g:OmniSharp_want_snippet = 0

" set this if you are using WSL - server is saved on `%LocalAppData%\omnisharp-vim\`
let g:OmniSharp_translate_cygwin_wsl = 0

""""""""""""""""""""
"Ultisnips Settings"
""""""""""""""""""""
" set key mappings for ultisnips - had to change TAB
"let g:UltiSnipsExpandTrigger='>S'
"let g:UltiSnipsListSnippets='<C-,>'
"let g:UltiSnipsJumpForwardTrigger='>s'
"let g:UltiSnipsJumpBackwardTrigger='<s'

""""""""""""""""""""""
"Vim Lsp Settings End"
""""""""""""""""""""""

"""""""""""""""""""""""
"Vim-Markdown Settings"
"""""""""""""""""""""""
" disable folding for markdown files
let g:vim_markdown_folding_disabled = 1

" disable markdown conceal for code blocks
let g:vim_markdown_conceal_code_blocks = 0

" allow strikethrough
"let g:vim_markdown_strikethrough = 1

" add syntax highlight for code blocks
let g:vim_markdown_fenced_languages = ['bash=sh', 'csharp=cs', 'css', 'html', 'javascript', 'js=javascript', 'python', 'xml', 'yaml', 'pwsh=powershell']

" disable json conceal to see quotation marks
let g:vim_json_conceal = 0

"""""""""""""""""""""""""
"Vim-SpellCheck Settings"
"""""""""""""""""""""""""
" let g:SpellCheck_OnNospell = function('SpellCheck#AutoEnableSpell')

""""""""""""""""""
"VimWiki Settings"
""""""""""""""""""
" use markdown syntax for vimwiki files
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" do not set `.md` files as vimwikifiles
let g:vimwiki_global_ext = 0

"""""""""""""""""""
"WhichKey Settings"
"""""""""""""""""""
map <silent> <leader>h :WhichKey! g:dict<Cr>

let g:which_key_hspace = 5
let g:which_key_centered = 1
let g:which_key_flatten = 1
let g:which_key_max_size = 1
let g:which_key_disable_default_offset = 1

let g:dict= {
\ '<leader>b': ['FZF', 'Buffers'],
\ '<leader>c': ['FZF', 'CMD History'],
\ '<leader>C': ['FZF', 'Colors'],
\ '<leader>f': ['ALE', 'Lint Fix'],
\ '<leader>h': ['WhichKey', 'Show Keybindings'],
\ '<leader>H': ['FZF', 'History'],
\ '<leader>i': ['Startify', 'Startify Toggle'],
\ '<leader>l': ['ALE', 'ALE Toggle'],
\ '<leader>L': ['ALE', 'Run Lint'],
\ '<leader>m': ['MRU', 'View Most Recent Files'],
\ '<leader>M': ['FZF', 'Search Keybindings'],
\ '<leader>n': ['NERDTree', 'NERDTree Toggle'],
\ '<leader>p': ['Python', 'Run Python Script'],
\ '<leader>t': [':edit', 'New Buffer'],
\ '<leader>T': ['FloatTerm', 'Open Terminal'],
\ '<leader>u': [':source%', 'Source Vimrc'],
\ '<leader>x': [':bdelete', 'Close Current Buffer'],
\ '<leader>W': ['FZF', 'Windows'],
\ ']m': ['ALE', 'Next Lint Error'],
\ '[m': ['ALE', 'Previous Lint Error'],
\ 'C-a': [':nrformats', 'Increment Alphanumeric'],
\ 'C-b': ['Smooth-Scroll', 'Page Up'],
\ 'C-d': ['Smooth-Scroll', 'Scroll Down'],
\ 'C-f': ['Smooth-Scroll', 'Page Down'],
\ 'C-u': ['Smooth-Scroll', 'Scroll Up'],
\ 'C-x': ['Nrformats', 'Decrement Alphanumeric'],
\ 'A-arrows': ['Move Between Windows', 'Move Between Windows'],
\ 'C-arrows': [':bnext/previous', 'Move Between Buffers'],
\ 'S-arrows': ['Resize Buffers', 'Resize Buffers'],
\ 'F5': ['Mundo', 'View Undo History'],
\ 'F6': [':spell!', 'Spellcheck Toggle'],
\ 'F8': ['Markdown Preview', 'MD Server Start'],
\ }

" change WhichKey menu colors
"highlight WhichKey ctermfg=blue
"highlight WhichKeySeperator ctermfg=green
"highlight WhichKeyDesc ctermfg=red
highlight WhichKeyFloating ctermfg=grey

"""""""""""""""""""""
"PLUGIN SETTINGS END"
"""""""""""""""""""""

""""""""""""""""""""
"Load Vim Help Files"
"""""""""""""""""""""
" load vim help files
" packloadall
" silent! helptags ALL
