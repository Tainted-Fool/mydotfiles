-- Use protected call so we know where error is coming from
local status_ok, tsj = pcall(require, "treesj")
if not status_ok then
    vim.notify("treesj plugin was not found!")
    return
end

-- local langs = {
--   'javascript',
--   'typescript',
--   'typescriptreact',
--   'javascriptreact',
--   'html',
--   'css',
--   'json',
--   'yaml',
--   'markdown',
--   'vue',
--   'svelte',
--   'lua',
--   'python',
--   'ruby',
--   'go',
--   'rust',
--   'java',
--   'php',
--   'c',
--   'cpp',
--   'dart',
--   'scala',
--   'swift',
--   'kotlin',
--   'elixir',
--   'haskell',
--   'ocaml',
--   'graphql',
--   'sql',
--   'dockerfile',
--   'bash',
--   'fish',
--   'vim',
--   'vimwiki',
--   'clojure',
--   'fennel',
--   'nix',
--   'ledger',
--   'latex',
--   'purescript',
--   'r',
--   'dart',
--   'scala',
--   'swift',
--   'kotlin',
--   'elixir',
--   'haskell',
--   'ocaml',
--   'graphql',
--   'sql',
--   'dockerfile',
--   'bash',
--   'fish',
--   'vim',
--   'vimwiki',
--   'clojure',
--   'fennel',
--   'nix',
--   'ledger',
--   'latex',
--   'purescript',
--   'r',
--   'dart',
--   'scala',
--   'swift',
--   'kotlin',
--   'elixir',
--   'haskell',
--   'ocaml',
--   'graphql',
--   'sql',
--   'dockerfile',
--   'bash',
--   'fish',
--   'vim',
--   'vimwiki',
--   'clojure',
--   'fennel',
--   'nix',
--   'ledger',
--   'latex',
--   'purescript',
--   'r',
--   'dart',
--   'scala',
--   'swift',
--   'kotlin',
--   'elixir',
--   'haskell',
--   'ocaml',
--   'graphql',
--   'sql',
--   'dockerfile',
--   'bash',
--   'fish',
--   'vim',
--   'vimwiki',
--   'clojure',
--   'fennel',
--   'nix',
--   'ledger',
--   'latex',
--   'purescript',
--   'r',
--   'dart',
--   'scala',
--   'swift',
--   'kotlin',
--   'elixir',
--   'haskell',
--   'ocaml',
-- }

tsj.setup({
  ---@type boolean Use default keymaps (<space>m - toggle, <space>j - join, <space>s - split)
  use_default_keymaps = false,
  ---@type boolean Node with syntax error will not be formatted
  check_syntax_error = true,
  ---If line after join will be longer than max value,
  ---@type number If line after join will be longer than max value, node will not be formatted
  max_join_length = 200,
  ---Cursor behavior:
  ---hold - cursor follows the node/place on which it was called
  ---start - cursor jumps to the first symbol of the node being formatted
  ---end - cursor jumps to the last symbol of the node being formatted
  ---@type 'hold'|'start'|'end'
  cursor_behavior = 'hold',
  ---@type boolean Notify about possible problems or not
  notify = true,
  ---@type boolean Use `dot` for repeat action
  dot_repeat = true,
  ---@type nil|function Callback for treesj error handler. func (err_text, level, ...other_text)
  on_error = nil,
  ---@type table Presets for languages
  -- langs = {}, -- See the default presets in lua/treesj/langs
})

